import Head from 'next/head';
import styles from '@/styles/Home.module.css';
import { Swiper, SwiperSlide, useSwiper } from 'swiper/react';

// import required modules
import { Autoplay, Pagination, Navigation } from 'swiper';
// Import Swiper styles
import 'swiper/css';
// import 'swiper/css/pagination';
// import 'swiper/css/navigation';
import { useMemo, useRef, useState } from 'react';
import Vertical from '@/components/Vertical';
import { isEqual, sample, times, uniqWith } from 'lodash';
import { useIsMounted } from '@/hooks/useIsMounted';

const verticals = [1, 1, 1, 1, 1];

const samples = ['🍇', '🍉', '🍊', '🍎', '🥝', '🍒', '🍌', '🍐', '🍓'];
const lengthPerVertical = 9;
const entries = verticals.map((item) =>
	times(lengthPerVertical, () => sample(samples))
);

export default function Home() {
	// const [spin, setSpin] = useState(false);
	// const [swipper1, setSwipper1] = useState(null);
	const swipperInstances = useRef([]);
	const [choices, setChoices] = useState([]);
	const [points, setPoints] = useState(100);
	const isMounted = useIsMounted();
	const [selected, setSelected] = useState(verticals.map((item) => []));
	const [running, setRunning] = useState(verticals.map((item) => false));
	// const swiper = useSwiper();
	// swiper.slideTo();

	const isRunning = running.some((item) => item);

	const isWin = useMemo(() => {
		const anySubarrayEmpty = selected.some((subarr) => subarr.length === 0);
		if (anySubarrayEmpty) {
			return false;
		} else {
			const allSubarraysEqual = uniqWith(selected, isEqual).length === 1;
			return allSubarraysEqual;
		}
	}, [selected]);

	// swiper.on('transitionEnd', function() {
	//   if(swiper.activeIndex === 2) {
	//     swiper.autoplay.stop();
	//   }
	// }

	const handleSpin = () => {
		setPoints((curr) => curr - 5);
		setSelected(verticals.map((item) => []));
		if (isRunning) {
			verticals.map((item, index) => {
				swipperInstances.current[index]?.autoplay.stop();
			});
			setChoices([]);
		} else {
			verticals.map((item, index) => {
				swipperInstances.current[index]?.autoplay.start();
			});
		}
	};

	return (
		<>
			<Head>
				<title>Slot App</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className={styles.main}>
				<div className='header'>
					<p>Points: {points}</p>
					{isWin && (
						<>
							<h3>WIN!</h3>
							<button>GAMBLE</button>
							<button
								onClick={() => {
									setPoints((curr) => curr + 1000);
									setSelected(verticals.map((item) => []));
								}}
							>
								CLAIM
							</button>
						</>
					)}
				</div>

				{isMounted && (
					<div style={{ display: 'flex' }}>
						{verticals.map((item, index) => (
							<Vertical
								key={index}
								ref={swipperInstances}
								index={index}
								choice={choices[index]}
								setChoices={setChoices}
								verticalsCount={verticals.length}
								entries={entries[index]}
								setSelected={setSelected}
								setRunning={setRunning}
							/>
						))}
					</div>
				)}

				{/* <button type='button' onClick={() => swipper1.autoplay.stop()}>
					SPIN
				</button> */}
				{/* <button
					type='button'
					onClick={() => {
						handleSpin();
					}}
				>
					SPIN
				</button> */}
				<button
					onClick={() => {
						setChoices(verticals.map((item) => undefined));
						handleSpin();
					}}
				>
					{isRunning ? 'STOP' : 'SPIN'}
				</button>
				<button
					onClick={() => {
						setChoices(verticals.map((item) => '🍇,🍉,🍊'));
						handleSpin();
					}}
				>
					{isRunning ? 'STOP' : 'SPIN'} {choices}
				</button>
				<br />
				<div
					style={{
						display: 'flex',

						// transform: 'rotate(-90deg) scaleX(-1)',
					}}
				>
					{selected.map((item, index) => (
						<div key={item + index}>
							{item.map((subItem, subIndex) => (
								<div key={subItem + subIndex}>{subItem}</div>
							))}
						</div>
					))}
				</div>
			</main>
		</>
	);
}
